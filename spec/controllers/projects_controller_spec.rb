require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProjectsController do
  login_user
  
  before(:each) do
    # login_user
    
    @project = Fabricate(:project, :user => subject.current_user)
  end

  describe "GET index" do
    it "assigns all projects as @projects" do
      get :index
      assigns(:projects).should eq([@project])
    end
  end

  describe "GET show" do
    it "assigns the requested project as @project" do
      get :show, {:id => @project.id}
      assigns(:project).should eq(@project)
    end
  end

  describe "GET new" do
    it "assigns a new project as @project" do
      get :new
      assigns(:project).should be_a_new(Project)
    end
  end

  describe "GET edit" do
    it "assigns the requested project as @project" do
      get :edit, {:id => @project.to_param}
      assigns(:project).should eq(@project)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Project" do
        expect {
          post :create, {:project => Fabricate.attributes_for(:project)}
        }.to change(Project, :count).by(1)
      end

      it "assigns a newly created project as @project" do
        post :create, {:project => Fabricate.attributes_for(:project)}
        assigns(:project).should be_a(Project)
        assigns(:project).should be_persisted
      end

      it "redirects to the created project" do
        post :create, {:project => Fabricate.attributes_for(:project)}
        response.should redirect_to(Project.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved project as @project" do
        # Trigger the behavior that occurs when invalid params are submitted
        Project.any_instance.stub(:save).and_return(false)
        post :create, {:project => { "title" => "invalid value" }}
        assigns(:project).should be_a_new(Project)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Project.any_instance.stub(:save).and_return(false)
        post :create, {:project => { "title" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "assigns the requested project as @project" do
        put :update, id: @project, project: Fabricate.attributes_for(:project)
        assigns(:project).should eq(@project) 
      end
      
      it "changes @contact's attributes" do
        @project = Fabricate(:project, :user => subject.current_user)
        put :update, {:id => @project.to_param, :project => { "title" => "Edit" }}
        @project.reload
        @project.title.should eq("Edit")
      end

      it "redirects to the project" do
        put :update, id: @project, project: Fabricate.attributes_for(:project)
        response.should redirect_to(@project)
      end
    end
    
    describe "with invalid params" do
      it "assigns the project as @project" do
        put :update, {:id => @project.to_param, :project => { "title" => nil }}
        assigns(:project).should eq(@project)
      end
    
      it "re-renders the 'edit' template" do
        put :update, {:id => @project.to_param, :project => { "title" => nil }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested project" do
      # project = Project.create! valid_attributes
      expect {
        delete :destroy, {:id => @project.to_param}
      }.to change(Project, :count).by(-1)
    end
  
    it "redirects to the projects list" do
      # project = Project.create! valid_attributes
      delete :destroy, {:id => @project.to_param}
      response.should redirect_to(projects_url)
    end
  end

end
